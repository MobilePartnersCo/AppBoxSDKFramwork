// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios13-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AppBoxSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AVFoundation
@_exported import AppBoxSDK
import AudioToolbox
import CoreImage.CIFilterBuiltins
import CommonCrypto
import CoreData
import CoreHaptics
import CoreImage
import CoreLocation
import DeveloperToolsSupport
import Foundation
import ImageIO
import LocalAuthentication
import MobileCoreServices
import Network
import StoreKit
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class AppBox : ObjectiveC.NSObject {
  @objc public static let shared: any AppBoxSDK.AppBoxProtocol
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class AppBoxWebConfig : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc open var wKWebViewConfiguration: WebKit.WKWebViewConfiguration?
  @objc open var allowsBackForwardNavigationGestures: Swift.Bool
  @objc open var scrollContentSize: CoreFoundation.CGSize
  @objc open var scrollContentOffset: CoreFoundation.CGPoint
  @objc open var scrollContentInset: UIKit.UIEdgeInsets
  @objc open var isScrollEnabled: Swift.Bool
  @objc open var scrollBounces: Swift.Bool
  @objc open var scrollAlwaysBounceVertical: Swift.Bool
  @objc open var scrollAlwaysBounceHorizontal: Swift.Bool
  @objc open var showsHorizontalScrollIndicator: Swift.Bool
  @objc open var showsVerticalScrollIndicator: Swift.Bool
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc required public init?(coder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol AppBoxProtocol {
  @objc func initSDK(baseUrl: Swift.String!, projectId: Swift.String?, webConfig: AppBoxSDK.AppBoxWebConfig, debugMode: Swift.Bool)
  @objc func initSDK(baseUrl: Swift.String!, projectId: Swift.String?, webConfig: AppBoxSDK.AppBoxWebConfig)
  @objc func initSDK(baseUrl: Swift.String!, projectId: Swift.String?, debugMode: Swift.Bool)
  @objc func initSDK(baseUrl: Swift.String!, projectId: Swift.String?)
  @objc func start(from vc: UIKit.UIViewController, completion: ((Swift.Bool, (any Swift.Error)?) -> Swift.Void)?)
  @objc func start(from vc: UIKit.UIViewController)
  @objc func setIntro(_ items: AppBoxSDK.AppBoxIntro)
  @objc func setPullDownRefresh(used: Swift.Bool)
  @objc func setBaseUrl(baseUrl: Swift.String!)
  @objc func setDebug(debugMode: Swift.Bool)
  @objc func movePush(response: UserNotifications.UNNotificationResponse)
  @_spi(AppBoxPushSDK) @objc @available(*, deprecated, message: "Internal use only. Do not use.")
  func pushMoveStart()
  @_spi(AppBoxPushSDK) @objc @available(*, deprecated, message: "Internal use only. Do not use.")
  func pushMoveSetParam(_ url: Swift.String, _ pushIdx: Swift.String)
  @_spi(AppBoxPushSDK) @objc @available(*, deprecated, message: "Internal use only. Do not use.")
  func setProjectId(_ projectId: Swift.String)
  @_spi(AppBoxPushSDK) @objc @available(*, deprecated, message: "Internal use only. Do not use.")
  func getProjectId() -> Swift.String?
  @_spi(AppBoxPushSDK) @objc @available(*, deprecated, message: "Internal use only. Do not use.")
  func getPushInfo(_ projectId: Swift.String, completion: @escaping (Swift.Bool, AppBoxSDK.Firebase_info?) -> Swift.Void)
  @_spi(AppBoxPushSDK) @objc @available(*, deprecated, message: "Internal use only. Do not use.")
  func setPushToken(_ token: Swift.String, pushYn: Swift.String)
  @_spi(AppBoxPushSDK) @objc @available(*, deprecated, message: "Internal use only. Do not use.")
  func setPushToken(_ token: Swift.String, pushYn: Swift.String, completion: ((Swift.Bool) -> Swift.Void)?)
  @_spi(AppBoxPushSDK) @objc @available(*, deprecated, message: "Internal use only. Do not use.")
  func getPushToken() -> Swift.String?
  @_spi(AppBoxPushSDK) @objc @available(*, deprecated, message: "Internal use only. Do not use.")
  func setFCMImage(_ request: UserNotifications.UNNotificationRequest, contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  @_spi(AppBoxPushSDK) @objc @available(*, deprecated, message: "Internal use only. Do not use.")
  func setSegment(_ segment: [Swift.String : Swift.String], completion: @escaping (Swift.Bool) -> Swift.Void)
}
@objc public class AppBoxIntro : ObjectiveC.NSObject {
  @objc final public let indicatorDefColor: Swift.String
  @objc final public let indicatorSelColor: Swift.String
  @objc final public let fontColor: Swift.String
  @objc final public let item: [AppBoxSDK.AppBoxIntroItems]
  @objc public init(indicatorDefColor: Swift.String = "#a7abab", indicatorSelColor: Swift.String = "#000000", fontColor: Swift.String = "#000000", item: [AppBoxSDK.AppBoxIntroItems])
  @objc convenience public init(item: [AppBoxSDK.AppBoxIntroItems])
  @objc convenience public init(indicatorDefColor: Swift.String, item: [AppBoxSDK.AppBoxIntroItems])
  @objc convenience public init(indicatorDefColor: Swift.String, fontColor: Swift.String, item: [AppBoxSDK.AppBoxIntroItems])
  @objc convenience public init(indicatorDefColor: Swift.String, indicatorSelColor: Swift.String, item: [AppBoxSDK.AppBoxIntroItems])
  @objc convenience public init(indicatorSelColor: Swift.String, item: [AppBoxSDK.AppBoxIntroItems])
  @objc convenience public init(indicatorSelColor: Swift.String, fontColor: Swift.String, item: [AppBoxSDK.AppBoxIntroItems])
  @objc deinit
}
@objc public class AppBoxIntroItems : ObjectiveC.NSObject {
  @objc final public let imageUrl: Swift.String
  @objc public init?(imageUrl: Swift.String)
  @objc deinit
}
@_spi(AppBoxPushSDK) @objc @_hasMissingDesignatedInitializers @objcMembers public class AppPushInfoApiModel : ObjectiveC.NSObject, Swift.Codable {
  @_spi(AppBoxPushSDK) required public init(from decoder: any Swift.Decoder) throws
  @_spi(AppBoxPushSDK) @objc deinit
  @_spi(AppBoxPushSDK) public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(AppBoxPushSDK) @objc @objcMembers public class Firebase_info : ObjectiveC.NSObject, Swift.Codable {
  @_spi(AppBoxPushSDK) @objc final public let project_id: Swift.String
  @_spi(AppBoxPushSDK) @objc final public let app_id: Swift.String
  @_spi(AppBoxPushSDK) @objc final public let api_key: Swift.String
  @_spi(AppBoxPushSDK) @objc final public let sender_id: Swift.String
  @_spi(AppBoxPushSDK) @objc public init(project_id: Swift.String, app_id: Swift.String, api_key: Swift.String, sender_id: Swift.String)
  @_spi(AppBoxPushSDK) required public init(from decoder: any Swift.Decoder) throws
  @_spi(AppBoxPushSDK) @objc deinit
  @_spi(AppBoxPushSDK) public func encode(to encoder: any Swift.Encoder) throws
}
